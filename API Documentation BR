NightEconomy API (v3.3.0)
A complete guide to the NightEconomy public API: how to import it, lifecycle, available methods, events, practical examples (/buy and Tycoon chat), and migration notes.

Last update: 2025-08-27
Compatibility: NeoForge 1.21.1, Java 21

Importing the API into your mod
repositories {
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation 'com.github.nightsult:NightEconomy:3.3.0' // or new version, check in project
}
Overview
The public API is designed to be:

Safe for consumption by other mods.
Clear separation between read-only access and exposed operations.
Equipped with ranking/tycoon helpers and per-currency formatting.
Ready-event driven to avoid race conditions on startup.
Main entrypoint:

package org.night.nighteconomy.api;

public interface NightEconomyAPI {
    Set<String> getAvailableCurrencies();

    BigDecimal getBalance(UUID playerId, String currencyId);

    TycoonInfo getCurrentTycoon(String currencyId);

    String getTycoonTag(String currencyId);

    List<RankEntry> getTopRanking(String currencyId, int limit);

    boolean tryDebit(UUID playerId, String currencyId, BigDecimal amount, String reason);

    String formatAmount(String currencyId, BigDecimal amount);
}
Data records:

package org.night.nighteconomy.api.data;

public record TycoonInfo(UUID playerId, String playerName, BigDecimal balance, String tag) { }

public record RankEntry(int position, UUID playerId, String playerName, BigDecimal balance) { }
Useful events:

NightEconomyReadyEvent — fired when the API is ready.
PlayerMoneyAddedEvent — fired when balance is added (if provided).
PlayerMoneyRemovedEvent — fired when balance is removed (if provided).
Notes:

Keep mavenLocal() before mavenCentral() if using local publishing.
Use Gradle’s “Reload All Gradle Projects” in the IDE after changes.
Lifecycle: getting the API instance
The safest is to listen for NightEconomyReadyEvent. As an alternative, you can fetch from the provider once you know the API is ready.

Via event (recommended)
import net.neoforged.bus.api.SubscribeEvent;
import org.night.nighteconomy.api.NightEconomyAPI;
import org.night.nighteconomy.api.event.NightEconomyReadyEvent;

public final class MyModMain {
    private NightEconomyAPI api;

    public MyModMain() {
        net.neoforged.neoforge.common.NeoForge.EVENT_BUS.register(this);
    }

    @SubscribeEvent
    public void onNightEconomyReady(NightEconomyReadyEvent e) {
        this.api = e.getApi(); // API is guaranteed ready here
    }
}
Via provider (when you are sure it’s ready)
import org.night.nighteconomy.api.NightEconomyAPI;
import org.night.nighteconomy.api.NightEconomyAPIProvider;

try {
    NightEconomyAPI api = NightEconomyAPIProvider.get();
    // use api...
} catch (IllegalStateException notReady) {
    // API not ready yet
}
API method reference
getAvailableCurrencies()
Returns the set of available currency IDs (e.g., "money", "gems").
Use this to validate a currencyId before calling other methods.
getBalance(playerId, currencyId)
Returns the player’s balance as BigDecimal.
Throws IllegalArgumentException if the currency does not exist.
Example:

BigDecimal bal = api.getBalance(playerUuid, "money");
String shown = api.formatAmount("money", bal); // e.g., "1,200.00" or with suffixes per config
getCurrentTycoon(currencyId)
Returns the top player info (TycoonInfo) for the currency or null if none.
Accessors on the record:
info.playerId()
info.playerName()
info.balance()
info.tag() — configured tag, e.g. "&a[$]"
Check if a player is the tycoon:

TycoonInfo info = api.getCurrentTycoon("money");
boolean isTycoon = info != null && playerUuid.equals(info.playerId());
getTycoonTag(currencyId)
Returns the configured Tycoon tag for the currency (may be empty).
Useful once you know the player is the tycoon and you just need the tag.
getTopRanking(currencyId, limit)
Returns a list of RankEntry ordered by balance (desc), positions starting at 1.
Ideal for “/top ”.
Example:

List<RankEntry> top10 = api.getTopRanking("money", 10);
for (RankEntry e : top10) {
    System.out.println("#" + e.position() + " " + e.playerName() + " - " + api.formatAmount("money", e.balance()));
}
tryDebit(playerId, currencyId, amount, reason)
Attempts to subtract a positive amount from the player’s balance.
Returns true on success; false on insufficient funds or invalid currency.
reason can be used for auditing/paper trails (implementation-dependent).
Example (/buy):

BigDecimal price = new BigDecimal("120.00");
boolean ok = api.tryDebit(playerUuid, "money", price, "Shop: /buy diamond");
formatAmount(currencyId, amount)
Formats the amount according to currency configuration (decimal separator, cents, multiples).
Always use this for UI strings and chat messages.
Example: /buy command
final String currencyId = "money";
final BigDecimal price = BigDecimal.valueOf(120);

if (!api.getAvailableCurrencies().contains(currencyId)) {
    fail("Currency 'money' is not available.");
    return 0;
}

BigDecimal bal = api.getBalance(playerUuid, currencyId);
if (bal.compareTo(price) < 0) {
    fail("Not enough: need " + api.formatAmount(currencyId, price));
    return 0;
}

if (!api.tryDebit(playerUuid, currencyId, price, "Shop: /buy diamond")) {
    fail("Could not debit, try again.");
    return 0;
}

// give item...
success("Bought for " + api.formatAmount(currencyId, price));
Example: Tycoon chat formatting (NeoForge 1.21.1)
Config file at config/nightshop/nightchat.toml:

format = "&e[L] {tycoon_money}&e [{nighteconomy_money}] &7%player%:&r {message}"
Supported tokens:

{tycoon_}: shows the Tycoon tag only if the sender is the tycoon for that currency.
{nighteconomy_}: the sender’s balance (formatted).
%player%: sender’s name.
{message}: chat message text.
Event handler essence:

@SubscribeEvent
public void onServerChat(ServerChatEvent event) {
    NightEconomyAPI api = Nightshop.getEconomyAPI();
    if (api == null) return;

    ServerPlayer p = event.getPlayer();
    UUID u = p.getUUID();
    String raw = event.getRawText();

    String s = formatFromFile; // read from nightchat.toml
    s = replaceTycoonTokens(s, api, u);       // uses api.getCurrentTycoon(...)
    s = replaceBalanceTokens(s, api, u);      // uses api.getBalance + api.formatAmount
    s = s.replace("%player%", p.getName().getString())
         .replace("{message}", raw);
    s = colorize(s); // replace & with §

    // NeoForge 1.21.1 setter:
    event.setMessage(Component.literal(s));
}
Events
Subscribe with @SubscribeEvent on the NeoForge event bus.

NightEconomyReadyEvent

Fired when the API is ready for use.
Provides: getApi()
PlayerMoneyAddedEvent / PlayerMoneyRemovedEvent (when present)

Provide data like currencyId, playerId, amount, newBalance, commandName.
Example:

@SubscribeEvent
public void onNEReady(NightEconomyReadyEvent e) {
    this.api = e.getApi();
}
Best practices and performance
Validate currencyId using getAvailableCurrencies() before invoking other methods.
Handle IllegalArgumentException for nonexistent currencies.
Do not spam calls in tick loops; ranking and formatting are cached internally, but still prefer batching and reuse.
Always use formatAmount for user-facing text.
Migration (old API → new API)
“Magnata” has been renamed to “Tycoon”.
Old names may still exist internally for compatibility, but external consumers should use Tycoon names.
TycoonInfo is a Java record; use accessors playerId(), playerName(), balance(), tag().
To check tycoon ownership, compare player UUID with TycoonInfo.playerId().
New additions for common mod needs:
tryDebit(playerId, currencyId, BigDecimal, reason) for shops.
formatAmount(currencyId, BigDecimal) for consistent formatting.
Troubleshooting
“Cannot import org.night.nighteconomy.api in my mod”

Ensure you ran publishToMavenLocal on NightEconomy.
Keep mavenLocal() before mavenCentral().
Check dependency tree: ./gradlew -q dependencies --configuration compileClasspath.
Refresh Gradle in your IDE; try --refresh-dependencies.
“Chat event setter not found in NeoForge 1.21.1”

Use event.setMessage(Component.literal(text)) (not setComponent).
